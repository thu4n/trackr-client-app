<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAS
        BQAAAk1TRnQBSQFMAwEBAAEIAQABCAEAARkBAAEZAQAE/wERAQAI/wFCAU0BNgcAATYDAAEoAwABZAMA
        ARkDAAEBAQABEAUAAYgBE+4AAf8BfwHOAXEBrQFxAa0BcQHOAXEGAAExAXIBrQFxAa0BcQHOAXEB/wF/
        qgAB/wF/Aa0BcQGtAXEBGAF3Ae8BcQH3AXYBlAFyAa0BcQExAXIBrQFxARABcgHeAXsB/wF/AdYBdgGt
        AXEBGAF3pgAB7wFxAa0BcQGUAXIEAAHvAXEBOQF3AgAB/wF/Aa0BcQH3AXYIAAH/AX8BrQFxAf8Bf6AA
        AbUBcgGtAXEBMQFyCAAB7wFxATkBdwIAAd4BfwGtAXEEAAGtAXEB/wF/BAAB1gFyAc4BcZ4AAa0BcQGt
        AXEB/wF/CgAB7wFxATkBdwIAAZQBcgExAXICAAHOAXEBrQFxAa0BcQQAAf8BfwGtAXGcAAGtAXEBcwFy
        DgAB7wFxATkBdwIAAfcBdgHvAXECAAGcAXsCAAEYAXcBrQFxAf8BfwH/AX8BrQFxmgAB/wF/Aa0BcRAA
        Ae8BcQE5AXcCAAH/AX8BrQFxCAABnAF7Af8BfwHOAXEBMQFymgABzgFxAdYBdhAAAe8BcQE5AXcEAAHO
        AXEB7wFxCAABnAF7Aa0BcZwAAc4BcQFaAXcQAAHvAXEBOQF3BgABrQFxAa0BcQExAXIBcwFyAc4BcQGt
        AXEBGAF3nAABzgFxAVoBdxAAAe8BcQE5AXcIAAH/AX8BlAFyAXMBcgJ7Ac4BcQE5AXecAAHOAXEBWgF3
        DgAB3gF/Aa0BcQHOAXEB/wF/DgABzgFxATkBd5wAAc4BcQFaAXcKAAH/AX8BzgFxAa0BcQF7AXcBcwFy
        Aa0BcQExAXIMAAHOAXEBOQF3nAABzgFxAVoBdwgAAXMBcgGtAXEBcwFyBgAB/wF/Ac4BcQGtAXEBOQF3
        CAABzgFxATkBd5wAAc4BcQFaAXcEAAGcAXsBrQFxAc4BcQ4AAf8BfwGtAXEBrQFxAf8BfwQAAc4BcQE5
        AXecAAHOAXEBOQF3Af8BfwGtAXEBrQFxAd4BfxQAAVoBdwGtAXEB7wFxAgABzgFxAXsBd5wAAXsBdwGt
        AXEBrQFxARgBdxwAATEBcgGtAXEBrQFxoAABrQFxAb0BeyAAATEBcgHOAXGgAAHeAX8BrQFxAdYBchoA
        Af8BfwHvAXEBrQFxpAAB/wF/Aa0BcQGtAXECexQAAdYBdgGtAXEBEAFyqgAB/wF/Aa0BcQGtAXEB/wF/
        DAACewGtAXEBzgFxsgABWgF3Aa0BcQHOAXEB/wF/BAAB3gF7Aa0BcQGtAXEB3gF7uAABUgFyAa0BcQGt
        AXEBrQFxAa0BcQJ7/wD/ADoAAUIBTQE+BwABPgMAASgDAAFkAwABGQMAAQEBAAEBBQABkAEBFgAD/wEA
        A/8BgAwAAf8CwQGADAAB/wIAAYAMAAH+ATIBPA0AAfgB8gFmDQAB8QHyAUYNAAHnAfIBUA0AAc8B8gF4
        DQABzwHzATwBgAwAAc8B8wKADAABzwHzAcABgAwAAc8B4QH8AYAMAAHPAYAB/AGADAABzwEcATwBgAwA
        AcwBfwEMAYAMAAHAAf8BxAGADAABwwH/AfEBgAwAAecB/wH5AYAMAAHjAf8B4wGADAAB8AH/AccBgAwA
        AfwBPwEfAYAMAAH/AQwBPwGADAAB/wHAAf8BgAwAA/8BgAwAA/8BgAwACw==
</value>
  </data>
</root>